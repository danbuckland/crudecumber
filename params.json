{"name":"Crudecumber","tagline":"A manual Cucumber runner RubyGem","body":"Crudecumber allows developers and testers to manually run through Cucumber scenarios written in Gherkin in the command line without the need for any step definitions.\r\n\r\nCrudecumber was developed as a tool to promote the use of [Behaviour Driven Development](https://en.wikipedia.org/wiki/Behavior-driven_development) and [Cucumber](https://github.com/cucumber/cucumber \"Cucumber GitHub Repository\") within teams that might not have the time or expertise to turn their scenarios into automated tests.\r\n\r\n## Installation\r\nYou must have Ruby 1.9.3 or higher running on your machine. Enter `ruby -v` in a terminal to see the version that is currently running.\r\n\r\nInstall the **Crudecumber** Ruby gem by running `gem install crudecumber`. Additional dependencies, including Cucumber and its dependencies, will automatically be downloaded and installed at this time.\r\n\r\n## Running\r\n**Crudecumber** can be run in two different ways, the simplest is to just run **Crudecumber** directly in the terminal. The alternative is to have **Crudecumber** called and run by Cucumber using a profile in an existing test suite. Both methods are described below.\r\n\r\n### Running as Crudecumber\r\nAfter installing **Crudecumber**, simply type `crudecumber` in a terminal from within a directory that contains a **features** folder with at least one ***.feature*** file.\r\n\r\nYour features and scenarios are run as they would be with Cucumber, but stop at each step to await one of the following keyboard inputs:\r\n* **P** or **Return** to **pass** the step.\r\n* **F** or **X** to **fail** the step and then type in the reason.\r\n* **S** to **Skip** the step.\r\n\r\nYou can append any of the usual Cucumber arguments to, for example, run a subset of your tests e.g.:\r\n\r\n`crudecumber -t @manual` to run only those scenarios tagged with **@manual**\r\n\r\n### Running as a Cucumber Profile\r\nUsing a `cucumber.yml` file, it's possible to have **Crudecumber** run your scenarios for one or more [Cucumber profiles](https://github.com/cucumber/cucumber/wiki/cucumber.yml). This allows the user to use **Crudecumber** to run tests, or a subset of tests, manually by typing, for example, `cucumber -p manual`.\r\n\r\nAfter installing **Crudecumber**, you'll need to require it in your automation suite. However, as soon as **Crudecumber** is loaded into your environment, it will be used to run every scenario.\r\n\r\nTo avoid **Crudecumber** being used on your already automated scenarios, it's recommended to conditionally `require 'crudecumber'` based on a specific tag. In the below example, we're using the tag **@manual**.\r\n\r\nAdd the following in the **Before** part of your `env.rb` file:\r\n```ruby\r\n# features/support/env.rb\r\n\r\nBefore do |scenario|  \r\n  if scenario.source_tag_names.include? \"@manual\"\r\n    require 'crudecumber'\r\n  end\r\nend\r\n```\r\n\r\nThis will work now if you were to run `cucumber -t @manual`. However, to avoid scenarios tagged with **@manual** being run during automated test runs, it's recommended to exclude these scenarios from all other profiles.\r\n\r\nAdd a **manual** profile to run scenarios tagged **@manual** and exclude scenarios tagged **@manual** from other profiles in your project's `cucumber.yml` file:\r\n\r\n```yaml\r\n# config/cucumber.yml\r\n\r\ndefault: -t ~@manual -f pretty -f html -o automated_test_report.html\r\nmanual: -t @manual\r\n\r\n```\r\nThen run your manual tests by typing `cucumber -p manual` in a terminal and using the keyboard inputs described in the previous section.\r\n\r\n**Crudecumber** uses its own modified formatters to display scenarios in the terminal and output an html report without error messages. Including other formatters and outputs in your **manual** profile may break something.\r\n\r\n#### Force Crudecumber from Cucumber\r\nDepending on the structure of you Cucumber tests, you may encounter an issue with the above where Cucumber runs again after **Crudecumber** has finished. This tends to occur if you have a lot going on in your **support** directory or you're using a framework like [Calabash](https://github.com/calabash \"Calabash GitHub account\").\r\n\r\nTo fix, replace `require 'crudecumber'` with the following in the **Before** part of you `env.rb` file:\r\n```ruby\r\n# features/support/env.rb\r\n\r\nBefore do |scenario|  \r\n  if scenario.source_tag_names.include? \"@manual\"\r\n    exec('crudecumber -p manual')\r\n  end\r\nend\r\n```\r\nUsing `exec` replaces the currently running process – in this case Cucumber – with the specified new process – in this case **Crudecumber**.\r\n\r\nAs before, use a **manual** profile to run scenarios tagged **@manual** and exclude scenarios tagged **@manual** from other profiles in your project's `cucumber.yml` file:\r\n\r\n```yaml\r\n# config/cucumber.yml\r\n\r\ndefault: -t ~@manual -f pretty -f html -o automated_test_report.html\r\nmanual: -t @manual -f progress\r\n\r\n```\r\nAdding `-f progress` will prevent the first feature being printed before **Crudecumber** is called.\r\n\r\nFor this to work, you should ensure that you have **Crudecumber** in your Gemfile and installed through bundler.\r\n\r\n\r\nIf you'd like to contribute to this project and perhaps fix any of the above, please fork the project on GitHub, make and test your change and then generate a pull request!\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2015 Dan Buckland and Contributors.\r\n\r\n### Authors and Contributors\r\n@danbuckland and @bonnett89","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}